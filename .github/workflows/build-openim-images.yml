name: Build OpenIM Images on Anolis OS 8.10

on:
  # 手动触发
  workflow_dispatch:
    inputs:
      openim_server_tag:
        description: 'OpenIM Server版本标签 (如: v3.8.0)'
        required: true
        default: 'v3.8.0'
      openim_chat_tag:
        description: 'OpenIM Chat版本标签 (如: v1.7.0)'
        required: true
        default: 'v1.7.0'
      openim_web_tag:
        description: 'OpenIM Web版本标签 (如: v3.8.0)'
        required: true
        default: 'v3.8.0'
      openim_admin_tag:
        description: 'OpenIM Admin版本标签 (如: v1.7.0)'
        required: true
        default: 'v1.7.0'
      force_rebuild:
        description: '强制重新构建所有镜像'
        type: boolean
        default: false
  
  # 定时检查更新 (每天 UTC 2:00)
  schedule:
    - cron: '0 2 * * *'
  
  # 推送到main分支时触发
  push:
    branches:
      - main
    paths:
      - 'dockerfiles/anolis/**'
      - '.github/workflows/build-openim-images.yml'

env:
  # 镜像仓库配置
  REGISTRY_DOCKERHUB: docker.io
  REGISTRY_ALIYUN: registry.cn-hangzhou.aliyuncs.com
  NAMESPACE: aspirin2019  # 您的Docker Hub命名空间
  ALIYUN_NAMESPACE: aspirin2019  # 您的阿里云镜像仓库命名空间
  
  # OpenIM官方仓库
  OPENIM_SERVER_REPO: openimsdk/open-im-server
  OPENIM_CHAT_REPO: openimsdk/chat

jobs:
  check-updates:
    runs-on: ubuntu-latest
    outputs:
      server_version: ${{ steps.check.outputs.server_version }}
      chat_version: ${{ steps.check.outputs.chat_version }}
      should_build: ${{ steps.check.outputs.should_build }}
    steps:
      - name: Checkout代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 检查OpenIM版本更新
        id: check
        run: |
          # 获取最新版本，如果失败则使用默认版本
          SERVER_LATEST=$(curl -s https://api.github.com/repos/${OPENIM_SERVER_REPO}/releases/latest | jq -r .tag_name)
          CHAT_LATEST=$(curl -s https://api.github.com/repos/${OPENIM_CHAT_REPO}/releases/latest | jq -r .tag_name)
          
          # 检查获取的版本是否有效，如果无效则使用默认版本
          if [[ "$SERVER_LATEST" == "null" || -z "$SERVER_LATEST" ]]; then
            SERVER_LATEST="v3.8.0"
          fi
          if [[ "$CHAT_LATEST" == "null" || -z "$CHAT_LATEST" ]]; then
            CHAT_LATEST="v1.7.0"
          fi
          
          echo "server_version=${SERVER_LATEST}" >> $GITHUB_OUTPUT
          echo "chat_version=${CHAT_LATEST}" >> $GITHUB_OUTPUT
          
          # 检查是否需要构建
          SHOULD_BUILD=false
          
          # 检查是否为手动触发或强制重建
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            SHOULD_BUILD=true
          fi
          
          # 检查是否为push触发
          if [[ "${{ github.event_name }}" == "push" ]]; then
            SHOULD_BUILD=true
          fi
          
          # 检查版本文件
          if [[ ! -f versions.txt ]]; then
            echo "server=" > versions.txt
            echo "chat=" >> versions.txt
            SHOULD_BUILD=true
          fi
          
          # 比较版本
          PREV_SERVER=$(grep "server=" versions.txt | cut -d'=' -f2)
          PREV_CHAT=$(grep "chat=" versions.txt | cut -d'=' -f2)
          
          if [[ "${SERVER_LATEST}" != "${PREV_SERVER}" ]] || \
             [[ "${CHAT_LATEST}" != "${PREV_CHAT}" ]]; then
            SHOULD_BUILD=true
          fi
          
          echo "should_build=${SHOULD_BUILD}" >> $GITHUB_OUTPUT
          
          echo "检测到的版本:"
          echo "OpenIM Server: ${SERVER_LATEST} (之前: ${PREV_SERVER})"
          echo "OpenIM Chat: ${CHAT_LATEST} (之前: ${PREV_CHAT})"
          echo "是否需要构建: ${SHOULD_BUILD}"

  build-server:
    needs: check-updates
    if: needs.check-updates.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout代码
        uses: actions/checkout@v4

      - name: 设置Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 登录Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_DOCKERHUB }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 登录阿里云镜像仓库
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_ALIYUN }}
          username: ${{ secrets.ALIYUN_USERNAME }}
          password: ${{ secrets.ALIYUN_PASSWORD }}
        continue-on-error: true

      - name: 下载OpenIM Server源码
        run: |
          # 确定要使用的版本
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            SERVER_VERSION="${{ github.event.inputs.openim_server_tag }}"
          else
            SERVER_VERSION="${{ needs.check-updates.outputs.server_version }}"
          fi
          
          echo "使用版本: ${SERVER_VERSION}"
          
          # 检查版本格式
          if [[ ! "$SERVER_VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+.*$ ]]; then
            echo "错误: 版本格式不正确: ${SERVER_VERSION}"
            echo "请使用类似 v3.8.0 的格式"
            exit 1
          fi
          
          # 尝试克隆指定版本
          if ! git clone --depth 1 --branch ${SERVER_VERSION} https://github.com/${OPENIM_SERVER_REPO}.git openim-server; then
            echo "错误: 无法找到版本 ${SERVER_VERSION}"
            echo "正在获取可用的标签..."
            git ls-remote --tags https://github.com/${OPENIM_SERVER_REPO}.git | head -10
            exit 1
          fi
          
          cp dockerfiles/anolis/Dockerfile.openim-server openim-server/Dockerfile

      - name: 构建并推送OpenIM Server镜像
        uses: docker/build-push-action@v5
        with:
          context: ./openim-server
          file: ./openim-server/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.REGISTRY_DOCKERHUB }}/${{ env.NAMESPACE }}/openim-server:${{ needs.check-updates.outputs.server_version }}-anolis
            ${{ env.REGISTRY_DOCKERHUB }}/${{ env.NAMESPACE }}/openim-server:latest-anolis
            ${{ env.REGISTRY_ALIYUN }}/${{ env.ALIYUN_NAMESPACE }}/openim-server:${{ needs.check-updates.outputs.server_version }}-anolis
            ${{ env.REGISTRY_ALIYUN }}/${{ env.ALIYUN_NAMESPACE }}/openim-server:latest-anolis
          cache-from: type=gha
          cache-to: type=gha,mode=max
          labels: |
            org.opencontainers.image.title=OpenIM Server on Anolis OS 8.10
            org.opencontainers.image.description=OpenIM Server built on Anolis OS 8.10
            org.opencontainers.image.version=${{ needs.check-updates.outputs.server_version }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}

  build-chat:
    needs: check-updates
    if: needs.check-updates.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout代码
        uses: actions/checkout@v4

      - name: 设置Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 登录Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_DOCKERHUB }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 登录阿里云镜像仓库
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_ALIYUN }}
          username: ${{ secrets.ALIYUN_USERNAME }}
          password: ${{ secrets.ALIYUN_PASSWORD }}
        continue-on-error: true

      - name: 下载OpenIM Chat源码
        run: |
          # 确定要使用的版本
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            CHAT_VERSION="${{ github.event.inputs.openim_chat_tag }}"
          else
            CHAT_VERSION="${{ needs.check-updates.outputs.chat_version }}"
          fi
          
          echo "使用版本: ${CHAT_VERSION}"
          
          # 检查版本格式
          if [[ ! "$CHAT_VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+.*$ ]]; then
            echo "错误: 版本格式不正确: ${CHAT_VERSION}"
            echo "请使用类似 v1.7.0 的格式"
            exit 1
          fi
          
          # 尝试克隆指定版本
          if ! git clone --depth 1 --branch ${CHAT_VERSION} https://github.com/${OPENIM_CHAT_REPO}.git openim-chat; then
            echo "错误: 无法找到版本 ${CHAT_VERSION}"
            echo "正在获取可用的标签..."
            git ls-remote --tags https://github.com/${OPENIM_CHAT_REPO}.git | head -10
            exit 1
          fi
          
          cp dockerfiles/anolis/Dockerfile.openim-chat openim-chat/Dockerfile

      - name: 构建并推送OpenIM Chat镜像
        uses: docker/build-push-action@v5
        with:
          context: ./openim-chat
          file: ./openim-chat/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.REGISTRY_DOCKERHUB }}/${{ env.NAMESPACE }}/openim-chat:${{ needs.check-updates.outputs.chat_version }}-anolis
            ${{ env.REGISTRY_DOCKERHUB }}/${{ env.NAMESPACE }}/openim-chat:latest-anolis
            ${{ env.REGISTRY_ALIYUN }}/${{ env.ALIYUN_NAMESPACE }}/openim-chat:${{ needs.check-updates.outputs.chat_version }}-anolis
            ${{ env.REGISTRY_ALIYUN }}/${{ env.ALIYUN_NAMESPACE }}/openim-chat:latest-anolis
          cache-from: type=gha
          cache-to: type=gha,mode=max
          labels: |
            org.opencontainers.image.title=OpenIM Chat on Anolis OS 8.10
            org.opencontainers.image.description=OpenIM Chat built on Anolis OS 8.10
            org.opencontainers.image.version=${{ needs.check-updates.outputs.chat_version }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}

  build-base-images:
    needs: check-updates
    if: needs.check-updates.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [mongodb, redis]
    steps:
      - name: Checkout代码
        uses: actions/checkout@v4

      - name: 设置Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 登录Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_DOCKERHUB }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 登录阿里云镜像仓库
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_ALIYUN }}
          username: ${{ secrets.ALIYUN_USERNAME }}
          password: ${{ secrets.ALIYUN_PASSWORD }}
        continue-on-error: true

      - name: 构建并推送${{ matrix.component }}镜像
        uses: docker/build-push-action@v5
        with:
          context: ./dockerfiles/anolis
          file: ./dockerfiles/anolis/Dockerfile.${{ matrix.component }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.REGISTRY_DOCKERHUB }}/${{ env.NAMESPACE }}/${{ matrix.component }}:latest-anolis
            ${{ env.REGISTRY_ALIYUN }}/${{ env.ALIYUN_NAMESPACE }}/${{ matrix.component }}:latest-anolis
          cache-from: type=gha
          cache-to: type=gha,mode=max
          labels: |
            org.opencontainers.image.title=${{ matrix.component }} on Anolis OS 8.10
            org.opencontainers.image.description=${{ matrix.component }} built on Anolis OS 8.10
            org.opencontainers.image.source=https://github.com/${{ github.repository }}

  build-web-admin:
    needs: check-updates
    if: needs.check-updates.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: 
          - name: openim-web
            input_tag: openim_web_tag
            official_image: openimsdk/openim-web
          - name: openim-admin
            input_tag: openim_admin_tag
            official_image: openimsdk/openim-admin
    steps:
      - name: Checkout代码
        uses: actions/checkout@v4

      - name: 设置Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 登录Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_DOCKERHUB }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 登录阿里云镜像仓库
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_ALIYUN }}
          username: ${{ secrets.ALIYUN_USERNAME }}
          password: ${{ secrets.ALIYUN_PASSWORD }}
        continue-on-error: true

      - name: 重新标签并推送${{ matrix.component.name }}镜像
        run: |
          # 确定要使用的版本
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            case "${{ matrix.component.name }}" in
              "openim-web")
                VERSION="${{ github.event.inputs.openim_web_tag }}"
                ;;
              "openim-admin")
                VERSION="${{ github.event.inputs.openim_admin_tag }}"
                ;;
              *)
                VERSION="latest"
                ;;
            esac
          else
            # 对于定时任务，使用latest标签
            VERSION="latest"
          fi
          
          echo "处理组件: ${{ matrix.component.name }}"
          echo "使用版本: ${VERSION}"
          
          # 拉取原始镜像
          docker pull ${{ matrix.component.official_image }}:${VERSION}
          
          # 重新标签为Anolis版本
          docker tag ${{ matrix.component.official_image }}:${VERSION} \
            ${{ env.REGISTRY_DOCKERHUB }}/${{ env.NAMESPACE }}/${{ matrix.component.name }}:${VERSION}-anolis
          docker tag ${{ matrix.component.official_image }}:${VERSION} \
            ${{ env.REGISTRY_DOCKERHUB }}/${{ env.NAMESPACE }}/${{ matrix.component.name }}:latest-anolis
          
          # 推送到Docker Hub
          docker push ${{ env.REGISTRY_DOCKERHUB }}/${{ env.NAMESPACE }}/${{ matrix.component.name }}:${VERSION}-anolis
          docker push ${{ env.REGISTRY_DOCKERHUB }}/${{ env.NAMESPACE }}/${{ matrix.component.name }}:latest-anolis
          
          # 推送到阿里云（可选）
          if [[ -n "${{ secrets.ALIYUN_USERNAME }}" ]]; then
            docker tag ${{ matrix.component.official_image }}:${VERSION} \
              ${{ env.REGISTRY_ALIYUN }}/${{ env.ALIYUN_NAMESPACE }}/${{ matrix.component.name }}:${VERSION}-anolis
            docker tag ${{ matrix.component.official_image }}:${VERSION} \
              ${{ env.REGISTRY_ALIYUN }}/${{ env.ALIYUN_NAMESPACE }}/${{ matrix.component.name }}:latest-anolis
            
            docker push ${{ env.REGISTRY_ALIYUN }}/${{ env.ALIYUN_NAMESPACE }}/${{ matrix.component.name }}:${VERSION}-anolis || true
            docker push ${{ env.REGISTRY_ALIYUN }}/${{ env.ALIYUN_NAMESPACE }}/${{ matrix.component.name }}:latest-anolis || true
          fi

  update-versions:
    needs: [check-updates, build-server, build-chat, build-base-images, build-web-admin]
    if: always() && needs.check-updates.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout代码
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 更新版本文件
        run: |
          echo "server=${{ needs.check-updates.outputs.server_version }}" > versions.txt
          echo "chat=${{ needs.check-updates.outputs.chat_version }}" >> versions.txt

      - name: 提交版本更新
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add versions.txt
          git commit -m "更新OpenIM版本到 server:${{ needs.check-updates.outputs.server_version }}, chat:${{ needs.check-updates.outputs.chat_version }}" || exit 0
          git push 
          