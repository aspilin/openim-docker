name: OpenIM Integration Tests

on:
  # 手动触发完整集成测试
  workflow_dispatch:
    inputs:
      test_type:
        description: '测试类型'
        required: true
        default: 'full'
        type: choice
        options:
        - full
        - api-only
        - performance
      server_image:
        description: 'Server镜像标签'
        required: false
        default: 'latest-anolis'
      chat_image:
        description: 'Chat镜像标签'
        required: false
        default: 'latest-anolis'
  
  # 当Server和Chat构建完成后触发
  workflow_run:
    workflows: ["Build OpenIM Server & Chat on Anolis OS 8.10"]
    types:
      - completed

env:
  # 镜像仓库配置
  REGISTRY_ALIYUN: registry.cn-hangzhou.aliyuncs.com
  ALIYUN_NAMESPACE: aspirin2019

jobs:
  integration-test:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success'
    steps:
      - name: Checkout代码
        uses: actions/checkout@v4

      - name: 设置Docker Compose环境
        run: |
          # 创建测试用的docker-compose.yml
          cat > docker-compose.test.yml << 'EOF'
          version: '3.8'
          services:
            mongodb:
              image: ${{ env.REGISTRY_ALIYUN }}/${{ env.ALIYUN_NAMESPACE }}/mongodb:latest-anolis
              ports:
                - "27017:27017"
              environment:
                - TZ=Asia/Shanghai
              healthcheck:
                test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
                interval: 30s
                timeout: 10s
                retries: 3

            redis:
              image: ${{ env.REGISTRY_ALIYUN }}/${{ env.ALIYUN_NAMESPACE }}/redis:latest-anolis
              ports:
                - "6379:6379"
              environment:
                - TZ=Asia/Shanghai
              healthcheck:
                test: ["CMD", "redis-cli", "ping"]
                interval: 30s
                timeout: 10s
                retries: 3

            openim-server:
              image: ${{ env.REGISTRY_ALIYUN }}/${{ env.ALIYUN_NAMESPACE }}/openim-server:${{ github.event.inputs.server_image || 'latest-anolis' }}
              ports:
                - "10001:10001"
                - "10002:10002" 
                - "10003:10003"
                - "10004:10004"
                - "10005:10005"
              depends_on:
                - mongodb
                - redis
              environment:
                - TZ=Asia/Shanghai
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:10001/healthz"]
                interval: 30s
                timeout: 10s
                retries: 3

            openim-chat:
              image: ${{ env.REGISTRY_ALIYUN }}/${{ env.ALIYUN_NAMESPACE }}/openim-chat:${{ github.event.inputs.chat_image || 'latest-anolis' }}
              ports:
                - "10008:10008"
                - "10009:10009"
              depends_on:
                - openim-server
              environment:
                - TZ=Asia/Shanghai
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:10008/healthz"]
                interval: 30s
                timeout: 10s
                retries: 3
          EOF

      - name: 启动OpenIM完整服务
        run: |
          echo "🚀 启动OpenIM完整服务栈..."
          docker-compose -f docker-compose.test.yml up -d
          
          echo "⏳ 等待服务启动..."
          sleep 60

      - name: 检查服务状态
        run: |
          echo "🔍 检查服务状态..."
          docker-compose -f docker-compose.test.yml ps
          
          echo "📊 检查服务健康状态..."
          docker-compose -f docker-compose.test.yml exec -T mongodb mongosh --eval "db.adminCommand('ping')" || echo "MongoDB 未准备就绪"
          docker-compose -f docker-compose.test.yml exec -T redis redis-cli ping || echo "Redis 未准备就绪"
          curl -f http://localhost:10001/healthz || echo "OpenIM Server 未准备就绪"
          curl -f http://localhost:10008/healthz || echo "OpenIM Chat 未准备就绪"

      - name: API功能测试
        if: github.event.inputs.test_type == 'full' || github.event.inputs.test_type == 'api-only'
        run: |
          echo "🧪 执行API功能测试..."
          
          # 测试用户注册
          echo "Testing user registration..."
          curl -X POST http://localhost:10001/user/register \
            -H "Content-Type: application/json" \
            -d '{"userID":"test001","nickname":"TestUser","faceURL":""}' \
            || echo "用户注册测试失败"
          
          # 测试获取token
          echo "Testing get token..."
          curl -X POST http://localhost:10008/auth/get_token \
            -H "Content-Type: application/json" \
            -d '{"userID":"test001","platformID":1}' \
            || echo "获取token测试失败"

      - name: 性能基准测试
        if: github.event.inputs.test_type == 'full' || github.event.inputs.test_type == 'performance'
        run: |
          echo "📈 执行性能基准测试..."
          
          # 安装性能测试工具
          sudo apt-get update && sudo apt-get install -y apache2-utils
          
          # API性能测试
          echo "Testing API performance..."
          ab -n 1000 -c 10 http://localhost:10001/healthz || echo "性能测试完成"

      - name: 生成测试报告
        if: always()
        run: |
          echo "📋 生成测试报告..."
          
          # 收集容器日志
          mkdir -p test-reports
          docker-compose -f docker-compose.test.yml logs > test-reports/container-logs.txt
          
          # 收集系统信息
          docker system df > test-reports/system-info.txt
          docker images | grep anolis > test-reports/anolis-images.txt
          
          echo "✅ 测试报告生成完成"

      - name: 清理测试环境
        if: always()
        run: |
          echo "🧹 清理测试环境..."
          docker-compose -f docker-compose.test.yml down -v
          docker system prune -f

      - name: 上传测试报告
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-reports
          path: test-reports/
          retention-days: 7

      - name: 测试总结
        run: |
          echo "🎉 OpenIM 集成测试完成！"
          echo "📦 测试的镜像:"
          echo "  🚀 Server: ${{ env.REGISTRY_ALIYUN }}/${{ env.ALIYUN_NAMESPACE }}/openim-server:${{ github.event.inputs.server_image || 'latest-anolis' }}"
          echo "  💬 Chat: ${{ env.REGISTRY_ALIYUN }}/${{ env.ALIYUN_NAMESPACE }}/openim-chat:${{ github.event.inputs.chat_image || 'latest-anolis' }}"
          echo "  🍃 MongoDB: ${{ env.REGISTRY_ALIYUN }}/${{ env.ALIYUN_NAMESPACE }}/mongodb:latest-anolis"
          echo "  🔴 Redis: ${{ env.REGISTRY_ALIYUN }}/${{ env.ALIYUN_NAMESPACE }}/redis:latest-anolis" 