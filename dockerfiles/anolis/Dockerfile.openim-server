# 多阶段构建：构建阶段
FROM registry.openanolis.cn/openanolis/anolisos:8.10 AS builder

# 设置环境变量
ENV LANG=en_US.UTF-8 \
    LC_ALL=en_US.UTF-8 \
    GOPROXY=https://goproxy.cn,direct \
    GO111MODULE=on \
    CGO_ENABLED=0 \
    GOOS=linux

# 尝试安装构建依赖，忽略RPM数据库错误
RUN (rm -rf /var/lib/rpm/__db* && rpm --initdb) || true && \
    microdnf install -y \
        wget \
        curl \
        git \
        make \
        gcc \
        gcc-c++ \
        tar \
        gzip \
        ca-certificates || \
    (echo "microdnf failed, trying yum..." && \
     yum install -y \
        wget \
        curl \
        git \
        make \
        gcc \
        gcc-c++ \
        tar \
        gzip \
        ca-certificates) && \
    (microdnf clean all || yum clean all)

# 安装Go环境
RUN wget -O go.tar.gz https://golang.google.cn/dl/go1.21.5.linux-amd64.tar.gz && \
    tar -C /usr/local -xzf go.tar.gz && \
    rm go.tar.gz

ENV PATH="/usr/local/go/bin:${PATH}" \
    GOPATH="/go" \
    GOROOT="/usr/local/go"

# 设置工作目录
WORKDIR /workspace

# 复制源码
COPY . .

# 创建必要的目录
RUN mkdir -p _output/bin

# 安装mage构建工具并构建所有组件
RUN go install github.com/magefile/mage@latest && \
    mage build

# 如果mage build失败，尝试使用make
RUN if [ ! -f "_output/bin/openim-api" ]; then \
        echo "mage build failed, trying make..." && \
        make build; \
    fi

# 如果还是没有二进制文件，尝试直接go build
RUN if [ ! -f "_output/bin/openim-api" ]; then \
        echo "make build failed, trying direct go build..." && \
        mkdir -p _output/bin && \
        go build -o _output/bin/openim-api ./cmd/openim-api && \
        go build -o _output/bin/openim-msggateway ./cmd/openim-msggateway && \
        go build -o _output/bin/openim-msgtransfer ./cmd/openim-msgtransfer && \
        go build -o _output/bin/openim-push ./cmd/openim-push && \
        go build -o _output/bin/openim-rpc-auth ./cmd/openim-rpc/openim-rpc-auth && \
        go build -o _output/bin/openim-rpc-conversation ./cmd/openim-rpc/openim-rpc-conversation && \
        go build -o _output/bin/openim-rpc-friend ./cmd/openim-rpc/openim-rpc-friend && \
        go build -o _output/bin/openim-rpc-group ./cmd/openim-rpc/openim-rpc-group && \
        go build -o _output/bin/openim-rpc-msg ./cmd/openim-rpc/openim-rpc-msg && \
        go build -o _output/bin/openim-rpc-third ./cmd/openim-rpc/openim-rpc-third && \
        go build -o _output/bin/openim-rpc-user ./cmd/openim-rpc/openim-rpc-user; \
    fi

# 验证构建结果
RUN ls -la _output/bin/ && \
    test -f "_output/bin/openim-api" || (echo "Build failed: openim-api not found" && exit 1)

# 运行阶段：基于Anolis OS 8.10的最小镜像
FROM registry.openanolis.cn/openanolis/anolisos:8.10

# 设置环境变量
ENV TZ=Asia/Shanghai

# 尝试安装运行时依赖，忽略RPM数据库错误
RUN (rm -rf /var/lib/rpm/__db* && rpm --initdb) || true && \
    microdnf install -y \
        ca-certificates \
        tzdata \
        curl || \
    (echo "microdnf failed, trying yum..." && \
     yum install -y \
        ca-certificates \
        tzdata \
        curl) && \
    (microdnf clean all || yum clean all)

# 设置时区
RUN ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime && \
    echo 'Asia/Shanghai' > /etc/timezone

# 创建运行用户
RUN groupadd -r openim && useradd -r -g openim openim

# 创建必要目录
RUN mkdir -p /openim/{bin,config,logs} && \
    chown -R openim:openim /openim

# 从构建阶段复制二进制文件
COPY --from=builder /workspace/_output/bin/ /openim/bin/

# 创建配置目录（运行时挂载）
RUN mkdir -p /openim/config

# 设置权限
RUN chmod +x /openim/bin/*

# 切换到非root用户
USER openim

WORKDIR /openim

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD /openim/bin/openim-api --version || exit 1

# 暴露端口
EXPOSE 10001 10002 10003 10004 10005

# 启动命令
CMD ["/openim/bin/openim-api"] 
