# 多阶段构建：构建阶段
FROM registry.openanolis.cn/openanolis/anolisos:8.10 AS builder

# 设置环境变量
ENV LANG=en_US.UTF-8 \
    LC_ALL=en_US.UTF-8 \
    GOPROXY=https://goproxy.cn,direct \
    GO111MODULE=on \
    CGO_ENABLED=0 \
    GOOS=linux \
    SERVER_DIR=/openim-server

# 尝试安装构建依赖，忽略RPM数据库错误
RUN (rm -rf /var/lib/rpm/__db* && rpm --initdb) || true && \
    microdnf install -y \
        wget \
        curl \
        git \
        make \
        gcc \
        gcc-c++ \
        tar \
        gzip \
        ca-certificates || \
    (echo "microdnf failed, trying yum..." && \
     yum install -y \
        wget \
        curl \
        git \
        make \
        gcc \
        gcc-c++ \
        tar \
        gzip \
        ca-certificates) && \
    (microdnf clean all || yum clean all)

# 安装Go 1.22环境
RUN ARCH="$(uname -m)" && \
    if [ "$ARCH" = "x86_64" ]; then \
        GO_ARCH="amd64"; \
    elif [ "$ARCH" = "aarch64" ]; then \
        GO_ARCH="arm64"; \
    else \
        echo "Unsupported architecture: $ARCH" && exit 1; \
    fi && \
    wget -O go.tar.gz "https://golang.google.cn/dl/go1.22.5.linux-${GO_ARCH}.tar.gz" && \
    tar -C /usr/local -xzf go.tar.gz && \
    rm go.tar.gz

ENV PATH="/usr/local/go/bin:/go/bin:${PATH}" \
    GOPATH="/go" \
    GOROOT="/usr/local/go"

# 设置工作目录
WORKDIR $SERVER_DIR

# 复制源码
COPY . .

# 下载依赖
RUN go mod download

# 安装Mage构建工具
RUN go install github.com/magefile/mage@v1.15.0

# 构建应用
RUN mage build

# 运行阶段：基于Anolis OS 8.10，但保留Go环境
FROM registry.openanolis.cn/openanolis/anolisos:8.10

# 设置环境变量
ENV TZ=Asia/Shanghai \
    SERVER_DIR=/openim-server

# 尝试安装运行时依赖，忽略RPM数据库错误
RUN (rm -rf /var/lib/rpm/__db* && rpm --initdb) || true && \
    microdnf install -y \
        ca-certificates \
        tzdata \
        curl \
        bash || \
    (echo "microdnf failed, trying yum..." && \
     yum install -y \
        ca-certificates \
        tzdata \
        curl \
        bash) && \
    (microdnf clean all || yum clean all)

# 安装Go 1.22环境（运行时需要）
RUN ARCH="$(uname -m)" && \
    if [ "$ARCH" = "x86_64" ]; then \
        GO_ARCH="amd64"; \
    elif [ "$ARCH" = "aarch64" ]; then \
        GO_ARCH="arm64"; \
    else \
        echo "Unsupported architecture: $ARCH" && exit 1; \
    fi && \
    wget -O go.tar.gz "https://golang.google.cn/dl/go1.22.5.linux-${GO_ARCH}.tar.gz" && \
    tar -C /usr/local -xzf go.tar.gz && \
    rm go.tar.gz

ENV PATH="/usr/local/go/bin:/go/bin:${PATH}" \
    GOPATH="/go" \
    GOROOT="/usr/local/go"

# 设置时区
RUN ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime && \
    echo 'Asia/Shanghai' > /etc/timezone

# 设置工作目录
WORKDIR $SERVER_DIR

# 从构建阶段复制编译后的二进制文件和必要文件
COPY --from=builder $SERVER_DIR/_output $SERVER_DIR/_output
COPY --from=builder $SERVER_DIR/config $SERVER_DIR/config
COPY --from=builder /go/bin/mage /usr/local/bin/mage
COPY --from=builder $SERVER_DIR/magefile_windows.go $SERVER_DIR/
COPY --from=builder $SERVER_DIR/magefile_unix.go $SERVER_DIR/
COPY --from=builder $SERVER_DIR/magefile.go $SERVER_DIR/
COPY --from=builder $SERVER_DIR/start-config.yml $SERVER_DIR/
COPY --from=builder $SERVER_DIR/go.mod $SERVER_DIR/
COPY --from=builder $SERVER_DIR/go.sum $SERVER_DIR/

# 安装运行时依赖
RUN go get github.com/openimsdk/gomake@v0.0.15-alpha.1

# 暴露端口
EXPOSE 10001 10002 10003 10004 10005

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:10001/healthz || exit 1

# 启动命令，使用官方方式
ENTRYPOINT ["sh", "-c", "mage start && tail -f /dev/null"] 
